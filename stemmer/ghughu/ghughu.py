# -*- coding: utf-8 -*-
"""GhuGhuStemmerTrie5_0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bgezb5hoO3lbrsbpZq26ECLF-JjkH9yc
"""


class Trie:
    def __init__(self):
        self.dict = {}

    def __repr__(self):
        return repr(self.dict)

    def insert(self, word):
        current_trie = self

        for letter in get_bangla_characters(word)[::-1]:
            current_trie = current_trie.dict.setdefault(letter, Trie())
        current_trie.dict.setdefault('#')

    def search(self, word):
        current_trie = self

        for letter in get_bangla_characters(word)[::-1]:
            if letter not in current_trie.dict:
                return (False, None)
            else:
                current_trie = current_trie.dict[letter]

        if '#' in current_trie.dict:
            return (True, current_trie)
        else:
            return (False, current_trie)


diacritic_marks = ['া', 'ি', 'ী', 'ু', 'ূ', 'ৃ', 'ে', 'ৈ', 'ো', 'ৌ']
annotes = ['্']


def get_characters(token):
    return [ch for ch in token.strip()]


def get_bangla_characters(token):
    chars = []
    current_char = ''
    for ch in token.strip():
        if not current_char == '' and not ch == '্' and not current_char.endswith('্'):
            chars.append(current_char)
            current_char = ''
        current_char = current_char + ch
    chars.append(current_char)
    return chars


def word_length(token):
    token = token.replace('ঁ', '')
    return sum(1 for ch in get_bangla_characters(token) if ch not in diacritic_marks and ch not in annotes)


modified_root_words = ['নি', 'পেক']
root_words = modified_root_words + ['ক', 'ল', 'হ', 'ক্ষ', 'দে', 'পা', 'খা', 'যা', 'থাক', 'বেড়া', 'ডাক', 'আঁক', 'দি',
                                    'কচলা', 'জ্বাল', 'পাল', 'পালা', 'পাঁক', 'পাক', 'পাঠ', 'বল', 'আস', 'ভুল', 'ভোল',
                                    'তুল', 'তোল', 'জ্বাল', 'টান', 'জান']

inflection_set_first = ['ই', 'ক', 'ছ', 'ত', 'ন', 'ব', 'ম', 'ল', 'স']
inflection_set_second = ['ছি', 'ছে', 'ছো', 'তা', 'তি', 'তে', 'তো', 'বা', 'বি', 'বে', 'বো', 'লা', 'লি', 'লে', 'লো']
inflection_set_third = ['চ্ছি', 'চ্ছে', 'চ্ছো', 'ছি', 'ছে']

suffixes = ['', 'ক', 'ন', 'র', 'া', 'ি', 'ী', 'ু', 'ূ', 'ৃ', 'ে', 'ৈ', 'ো', 'ৌ', 'য়', 'ইয়', 'কে', 'ছি', 'ছে', 'ছো',
            'দে', 'নে', 'বে', 'য়', 'লে', 'সে', 'াও', 'িয়', 'য়ে', 'ইনে', 'ইলে', 'ইসে', 'ইয়া', 'কগে', 'ছিস', 'ছেন',
            'বেন', 'য়ে', 'লাম', 'লেই', 'লেন', 'ানো', 'াবো', 'ায়', 'ালো', 'িলে', 'িয়া', 'িয়ে', 'েছে', 'েনি', 'য়নি',
            'ছিলো', 'তেসি', '়ায়', 'িয়ে', 'য়েছি', 'য়েছে', 'ইয়েছি', 'ইয়েছো', 'ওয়াবা', 'ওয়াবি', 'চ্ছিস', 'চ্ছেন',
            'ছিলাম', 'ছিলেন', 'য়ায়', 'য়েছে', 'াচ্ছি', 'াচ্ছো', 'িয়েছি', 'য়েছিস', 'য়েছেন', 'ইয়েছে', 'ইয়েছিস',
            'ইয়েছেন', 'ওয়ায়', 'ওয়াবেন', 'িয়েছে', 'িয়েছিস', 'িয়েছেন', 'ইয়েছিলে', 'ওয়াচ্ছে', 'চ্ছিলাম', 'তেছিলাম',
            'াচ্ছিলো', 'িয়েছিলে', 'য়েছিলাম', 'ইয়াছিলাম', 'ইয়েছিলাম', 'ইয়েছিলেন', 'ওয়াচ্ছিস', 'ওয়াচ্ছেন', 'াচ্ছিলাম',
            'িয়াছিলাম', 'িয়েছিলাম', 'িয়েছিলেন', 'ওয়াচ্ছিলা', 'ওয়াচ্ছিলি', 'ওয়াচ্ছিলো', 'ওয়াচ্ছিলাম', 'ওয়াচ্ছিলেন']
suffixes = suffixes + ['য়েছিলেন', 'নোর', 'য়েছিস', 'ননি', 'াই', 'ালে', 'ান', 'ায়', 'াতে', 'য়া', 'ছিল', 'চ্ছিলেন', 'তাম',
                       'িয়েছিলো']
suffixes = list(set(suffixes))


def sorter(str):
    return (len(str), str)


suffixes.sort(key=sorter)

suffix_trie = Trie()
for suffix in suffixes:
    suffix_trie.insert(suffix)

inflections = inflection_set_first + inflection_set_second + inflection_set_third

for inflection in inflections:
    suffix_trie.insert(inflection)


def remove_suffix(token, suffix):
    return token[:-len(suffix)]


def remove_diacritic_marks(token):
    for diacritic_mark in diacritic_marks:
        if token.endswith(diacritic_mark):
            token = remove_suffix(token, diacritic_mark)
    return token


"""
খে > খা, দি > দে, খু > খো 
"""


def transform_diacritic_mark(token):
    if token.startswith(('দেখ', 'খেল', 'ফেল', 'ঠেল', 'মেল', 'গেল', 'বেড়া', 'বের', 'বিল', 'মেশ', 'দে')):
        return token

    if token in ['নে', 'দে']:
        return token

    mp = {
        'ে': 'া',
        'ু': 'ো',
        'ি': 'ে'
    }

    if len(token) >= 2:
        if token[1] in ['ে', 'ু', 'ি']:
            newtoken = token[:1] + mp[token[1]]
            if len(token) >= 3:
                newtoken = newtoken + token[2:]
            token = newtoken
    return token


"""
বু > বো, খু > খো 
"""


def transform_diacritic_mark_u(token):
    mp = {
        'ু': 'ো'
    }

    if len(token) >= 2:
        if token[1] in ['ু']:
            newtoken = token[:1] + mp[token[1]]
            if len(token) >= 3:
                newtoken = newtoken + token[2:]
            token = newtoken
    return token


def transform_prefix(prefix):
    transformed = {
        'গি': 'যা',
        'গে': 'যা',
    }
    return transformed.get(prefix, prefix)


def add_words(w1, w2):
    if w1.endswith('ো') and (w2.startswith('ও') or w2.startswith('ো')):
        return w1[:-1] + 'ো' + (w2[1:] if len(w2) > 1 else '')
    if (w1.endswith('া') or w1.endswith('ি') or w1.endswith('ে')) and (w2.startswith('আ') or w2.startswith('া')):
        return w1[:-1] + 'া' + (w2[1:] if len(w2) > 1 else '')
    return w1 + w2


def final_touch_up_trie(prefix, suffix):
    token = prefix + suffix

    output = prefix

    iyeo_tuple = ('ই', 'য়ে', 'ও')
    iya_tuple = ('িয়া', 'িয়ে')

    prefix = transform_prefix(prefix)

    ano_prefix_list = ['কচলা', 'জ্বাল', 'পালা', 'দাড়া', 'দাঁড়া', 'দাড়', 'দাঁড়', 'পাঁকা', 'পাকা', 'পাঠ', 'পৌঁছ', 'বেড়া',
                       'পৌছ', 'শিটক', 'বিল', 'কুচক', 'কুঁচক', 'মচক']
    if prefix.startswith(tuple(ano_prefix_list)):
        return add_words(prefix, 'ানো')

    suffix_added = False

    ano_suffix_list = ['াবো', 'াচ্ছিলাম', 'াও', 'াতে', 'ায়', 'াই', 'ালে', 'ান', 'নোর', 'ালো', 'িয়ে', 'িয়েছিলো',
                       'াচ্ছিলো', 'ওয়াচ্ছিলাম', 'ওয়াচ্ছেন', 'ওয়াচ্ছিলেন', 'ওয়াবেন', 'ওয়াবি', 'ওয়াবা', 'ওয়াচ্ছিলো',
                       'ওয়াচ্ছিলা', 'ওয়াচ্ছিলি', 'ওয়াচ্ছে', 'ওয়াচ্ছিস', 'ইয়েছিলাম', 'ইয়েছি', 'ইয়েছো', 'ইয়েছিস',
                       'ইয়াছিলাম', 'ইয়েছিলে', 'ইয়েছেন', 'ইয়েছিলেন', 'িয়েছেন', 'িয়েছিলেন', 'িয়েছিলে', 'িয়েছিলাম',
                       'িয়েছি', 'িয়েছিস', 'িয়াছিলাম', 'াচ্ছি', 'াচ্ছিলাম', 'াচ্ছো']
    if suffix in ano_suffix_list:
        prefix = transform_diacritic_mark(prefix)
        if not token.startswith(tuple(['নি', 'গি'])):
            if word_length(prefix) > 1:
                prefix = add_words(prefix, 'ানো')
            else:
                prefix = add_words(prefix, 'ওয়ানো')
            suffix_added = True
        else:
            prefix = transform_prefix(prefix)
            prefix = add_words(prefix, "ওয়া")
            suffix_added = True

    if not suffix_added and word_length(prefix) > 1:
        """
        rule from ghughu - করিয়েছিলাম > করানো, বলিয়েছিলাম > বলানো 
        """
        if prefix.endswith(iya_tuple):
            for suff in list(iya_tuple):
                if prefix.endswith(suff):
                    if word_length(remove_suffix(prefix, suff)) > 1:
                        prefix = remove_suffix(prefix, suff)
                        prefix = transform_diacritic_mark(prefix)
                        prefix = transform_prefix(prefix)
                        prefix = add_words(prefix, 'ানো')
                        suffix_added = True

        """
        খেয়েছিলাম > খাওয়া 
        (not added in elif for words like 'নিয়েছিলাম' which should be handled here)
        """
        if (prefix.endswith(iyeo_tuple)):
            for suff in list(iyeo_tuple):
                if prefix.endswith(suff):
                    prefix = remove_suffix(prefix, suff)
                    prefix = transform_diacritic_mark(prefix)
                    prefix = transform_prefix(prefix)
                    prefix = add_words(prefix, 'ওয়া')
                    suffix_added = True

        if not suffix_added:
            prefix = remove_diacritic_marks(prefix)
            prefix = transform_prefix(prefix)
            prefix = transform_diacritic_mark(prefix)  # দেখ->দেখা, খেল->খেলা <-----> পেকে->পাকা
            prefix = add_words(prefix, 'া')
    elif not suffix_added:
        """
        when the word root only has one non-diacritic letter :- খা > খাওয়া, যা > যাওয়া 
        """
        prefix = transform_diacritic_mark(prefix)
        prefix = transform_prefix(prefix)
        prefix = add_words(prefix, 'ওয়া')

    # rule from ghughu
    if prefix[0] == 'এ':
        prefix = add_words('আ', prefix[1:])

    output = output + " + " + suffix + " + " + prefix
    return prefix  # output


def stem_trie(token):
    post_suffixes = ['না']
    for post_suffix in post_suffixes:
        if token.endswith(post_suffix):
            token_stripped = remove_suffix(token, post_suffix)
            if word_length(token_stripped) >= 2:
                token = token_stripped
                break

    if token.startswith(('আছ', 'ছিল')):
        return 'থাকা'

    if token in root_words:
        return final_touch_up_trie(token, '')

    if token.endswith('ানো') or token.endswith('ওয়া'):
        return transform_diacritic_mark(token)

    found_words = []
    found_suffixes = []
    token_trie = suffix_trie

    found_words.append(token)
    found_suffixes.append('')

    token_chars = get_bangla_characters(token)
    for i in range(len(token_chars)):
        '''
        if the input word has only single letter, don't split it
        '''
        if word_length(token) == 1:
            break

        current_char = token_chars[len(token_chars) - (i + 1)]
        found, new_trie = token_trie.search(current_char)
        prefix = ''.join(token_chars[:len(token_chars) - (i + 1)])
        suffix = ''.join(token_chars[len(token_chars) - (i + 1):])

        if found:
            if prefix in root_words:
                return final_touch_up_trie(prefix, suffix)

            '''
            the suffix নে only comes after prefix with length 2 or more
            '''
            prefix_len_2 = ['নে', 'র', 'লা', 'লে', 'লি', 'লেন', 'াই', 'ালে', 'ান', 'নোর', 'ায়', 'বে', 'সে', 'তাম',
                            'িয়েছিলো']
            if suffix in prefix_len_2 and word_length(prefix) < 2:
                break

            found_words.append(prefix)
            found_suffixes.append(suffix)
            if word_length(prefix) <= 1:
                break

        token_trie = new_trie

        if token_trie == None:
            break

    index = -1
    return final_touch_up_trie(found_words[index], found_suffixes[index])


def stem(word):
    return stem_trie(word)
